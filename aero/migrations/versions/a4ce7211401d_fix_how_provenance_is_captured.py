"""Fix how provenance is captured

Revision ID: a4ce7211401d
Revises: 0a81442faea4
Create Date: 2024-09-20 02:22:35.162192

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "a4ce7211401d"
down_revision = "0a81442faea4"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "data",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column("collection_uuid", sa.String(), nullable=True),
        sa.Column("collection_url", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("data", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_data_id"), ["id"], unique=False)

    op.create_table(
        "function",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "provenance",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("flow_id", sa.Uuid(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("provenance", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_provenance_id"), ["id"], unique=False)

    op.create_table(
        "tag",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "data_tag",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("data_id", sa.Uuid(), nullable=True),
        sa.Column("tag_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_id"],
            ["data.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "data_version",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=True),
        sa.Column("checksum", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("data_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_id"],
            ["data.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("data_version", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_data_version_id"), ["id"], unique=False)

    op.create_table(
        "flow",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("function_id", sa.Uuid(), nullable=True),
        sa.Column("function_args", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("timer", sa.Integer(), nullable=True),
        sa.Column("timer_job_id", sa.String(), nullable=True),
        sa.Column("policy", sa.Integer(), nullable=True),
        sa.Column("last_executed", sa.DateTime(), nullable=True),
        sa.Column("user_endpoint", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["function_id"],
            ["function.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("flow", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_flow_id"), ["id"], unique=False)

    op.create_table(
        "data_file",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("file_name", sa.String(), nullable=True),
        sa.Column("file_type", sa.String(), nullable=True),
        sa.Column("size", sa.Numeric(), nullable=True),
        sa.Column("encoding", sa.String(), nullable=True),
        sa.Column("version_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["version_id"],
            ["data_version.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("data_file", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_data_file_id"), ["id"], unique=False)

    op.create_table(
        "flow_contribution",
        sa.Column("flow_id", sa.Uuid(), nullable=True),
        sa.Column("produced_data_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["flow_id"],
            ["flow.id"],
        ),
        sa.ForeignKeyConstraint(
            ["produced_data_id"],
            ["data.id"],
        ),
    )
    op.create_table(
        "flow_derivation",
        sa.Column("flow_id", sa.Uuid(), nullable=True),
        sa.Column("previous_data_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["flow_id"],
            ["flow.id"],
        ),
        sa.ForeignKeyConstraint(
            ["previous_data_id"],
            ["data.id"],
        ),
    )
    op.create_table(
        "provenance_contribution",
        sa.Column("prov_id", sa.Uuid(), nullable=True),
        sa.Column("produced_version_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["produced_version_id"],
            ["data_version.id"],
        ),
        sa.ForeignKeyConstraint(
            ["prov_id"],
            ["provenance.id"],
        ),
    )
    op.create_table(
        "provenance_derivation",
        sa.Column("prov_id", sa.Uuid(), nullable=True),
        sa.Column("derived_version_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["derived_version_id"],
            ["data_version.id"],
        ),
        sa.ForeignKeyConstraint(
            ["prov_id"],
            ["provenance.id"],
        ),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("provenance_derivation")
    op.drop_table("provenance_contribution")
    op.drop_table("flow_derivation")
    op.drop_table("flow_contribution")
    with op.batch_alter_table("data_file", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_data_file_id"))

    op.drop_table("data_file")
    with op.batch_alter_table("flow", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_flow_id"))

    op.drop_table("flow")
    with op.batch_alter_table("data_version", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_data_version_id"))

    op.drop_table("data_version")
    op.drop_table("data_tag")
    op.drop_table("tag")
    with op.batch_alter_table("provenance", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_provenance_id"))

    op.drop_table("provenance")
    op.drop_table("function")
    with op.batch_alter_table("data", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_data_id"))

    op.drop_table("data")
    # ### end Alembic commands ###
